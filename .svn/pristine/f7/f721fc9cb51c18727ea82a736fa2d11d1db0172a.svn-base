/*
 * Copyright (c) 2014, 2016, XIANDIAN and/or its affiliates. All rights reserved.
 * XIANDIAN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 */
package com.xiandian.cloud.storage.sh;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.openstack4j.api.OSClient.OSClientV2;
import org.openstack4j.model.common.DLPayload;
import org.openstack4j.model.common.Payloads;
import org.openstack4j.model.storage.object.SwiftContainer;
import org.openstack4j.model.storage.object.SwiftObject;
import org.openstack4j.model.storage.object.options.ContainerListOptions;
import org.openstack4j.model.storage.object.options.ObjectListOptions;
import org.openstack4j.model.storage.object.options.ObjectLocation;
import org.openstack4j.model.storage.object.options.ObjectPutOptions;

import com.xiandian.cloud.storage.cons.Constants;
import com.xiandian.cloud.storage.sh.abst.SwiftStorage;
import com.xiandian.cloud.storage.sh.bean.FileBean;
import com.xiandian.cloud.storage.sh.security.QStringUtil;
import com.xiandian.cloud.storage.sh.util.UtilTools;
import com.xiandian.cloud.storage.util.DateUtil;

/**
 * Swift 具体实现
 * 
 * @author 云计算应用与开发项目组
 * @since V1.4
 */
public class SwiftDFS extends SwiftStorage {

	private OSClientV2 os;
	
	public SwiftDFS(){
		this.os = UtilTools.getConnection();
	}
	
	// logUtil.info(QEncodeUtil.aesEncrypt(QStringUtil.timeTostrHMS(new
	// Date())+"-"+str,QEncodeUtil.ydy));
	private void logger(String str) {
		LogUtil logUtil = new LogUtil();
		logUtil.info(QStringUtil.timeTostrHMS(new Date()) + "-" + str);
	}

	/**
	 * 描述：创建容器，根据根路径
	 * 
	 * @param rootPath
	 *            根路径
	 * @return boolean
	 */
	public boolean createContainer(String rootPath) {
		List<? extends SwiftContainer> containers = os.objectStorage()
				.containers()
				.list(ContainerListOptions.create().startsWith(rootPath));
		if (containers.isEmpty()) {
			os.objectStorage().containers().create(rootPath);
			return true;
		} else {
			for (SwiftContainer container : containers) {
				if (!rootPath.equals(container.getName())) {
					os.objectStorage().containers().create(rootPath);
					return true;
				}
			}
		}
		return false;
	}

	private Map<String, String> getSplitPath(String path) {
		String[] strPath = path.split("/");
		String rootPath = "";
		path = "";
		for (int i = 0; i < strPath.length; i++) {
			if (i == 0) {
				rootPath = strPath[0];
			} else {
				if (i == strPath.length - 1) {
					if (strPath[i].contains(".")) {
						path += strPath[i];
					} else {
						path += strPath[i] + "/";
					}
				} else {
					path += strPath[i] + "/";
				}

			}
		}
		Map map = new HashMap();
		map.put("rootPath", rootPath);
		map.put("path", path);
		return map;
	}

	/**
	 * 获取文件名
	 * 
	 * @param path
	 * @return
	 */
	private String getName(String path) {
		if (path != null && "/".equals(path.substring(path.length() - 1))) {
			path = path.substring(0, path.length() - 1);
		}
		return path.substring(path.lastIndexOf("/") + 1);
	}

	/**
	 * 获取文件类表
	 * 
	 * @param rpath
	 *            当前目录
	 * @return List
	 */
	@Override
	public List getFile(String rpath) {
		Map mappath = this.getSplitPath(rpath);
		String rootPath = mappath.get("rootPath").toString();
		String path = mappath.get("path").toString();
		List<? extends SwiftObject> objs = this.list(rootPath, path);
		List list = new ArrayList();
		for (SwiftObject obj : objs) {
			FileBean fb = new FileBean();
			String filePath = obj.getName();
			fb.setPath(filePath);
			fb.setName(this.getName(filePath));
			boolean flag = this.isDirectory(filePath);
			fb.setIsdirectory(flag);
			if (!flag) {
				fb.setLength(obj.getSizeInBytes());
			}
			fb.setLastmodified(DateUtil.cstToHMS(obj.getLastModified()));
			list.add(fb);
		}
		return list;
	}
	
	/**
	 * 判断是否为文件夹
	 * @param name
	 * @return
	 */
	public boolean isDirectory(String name){
		if (name != null && "/".equals(name.substring(name.length() - 1))) {
			return true;
		}
		return false;
	}
	

	/**
	 * 描述：上传文件方法
	 * 
	 * @param rpath
	 *            当前目录
	 * @param name
	 *            文件名称
	 * @param filepath
	 *            上传文件的路径
	 * @return
	 * 
	 */
	@Override
	public boolean createFile(String username, String path, String name,
			String filepath) {
		
		if(path.equals("")){
			path=null;
		}else{
			path=path.substring(0,path.length()-1);
		}
		os.objectStorage()
				.objects()
				.put(username, name, Payloads.create(new File(filepath)),
						ObjectPutOptions.create().path(path));
		return true;
	}

	/**
	 * 描述：文件重命名
	 * 
	 * @param rpath
	 *            重命名文件的路径
	 * @param name
	 *            重命名文件名称
	 * @return boolean
	 */
	@Override
	public boolean renameFile(String rpath, String name) {
		Map mappath = getSplitPath(rpath);
		String path = mappath.get("path").toString();
		String rootpath =mappath.get("rootPath").toString();
		String newpath="";
		String str[]=path.split("/");
		for(int i=0;i<str.length;i++){
			if(i==str.length-1){
				newpath+=name;
			}else{
				newpath+=str[i]+"/";
			}
		}
		this.copy(rootpath, rootpath, path, newpath);
		this.delete(rootpath, path);
		return true;
	}

	/**
	 * 描述：复制文件
	 * 
	 * @param rpath
	 *            真被复制的文件路径
	 * @param rnewpath
	 *            新的文件路径
	 * @return boolean
	 */
	@Override
	public boolean copyFile(String rpath, String rnewpath) {
		
		Map mappath = getSplitPath(rpath);
		String path = mappath.get("path").toString();
		String rootPath = mappath.get("rootPath").toString();
		Map nmappath = getSplitPath(rnewpath);
		String npath = nmappath.get("path").toString();
		String nrootpath=nmappath.get("rootPath").toString();
		
		boolean isexist=this.isexist(nrootpath, npath);
		
		if(isexist){
			this.copy(rootPath, nrootpath, path, npath);
			return true;
		}
		return false;
	}

	/**
	 * 描述：移动文件
	 * 
	 * @param rpath
	 *            准备要移动的文件路径
	 * @param newpath
	 *            新的文件路径
	 * @return boolean
	 */
	@Override
	public boolean moveFile(String rpath, String newpath) {
		Map mappath = getSplitPath(rpath);
		String path = mappath.get("path").toString();
		String rootpath=mappath.get("rootPath").toString();
		Map nmappath = getSplitPath(newpath);
		String npath = nmappath.get("path").toString();
		String nrootpath=nmappath.get("rootPath").toString();
		
		boolean isexist=this.isexist(nrootpath, npath);
		
		if(isexist){
			this.copy(rootpath, nrootpath, path, npath);
			this.delete(rootpath, path);
			return true;
		}
		return false;
	}

	/**
	 * 描述：下载文件
	 * 
	 * @param rpath
	 *            要下载的文件路径
	 * @return byte[]
	 */
	@Override
	public byte[] downloadFile(String rpath) {
		Map mappath = this.getSplitPath(rpath);
		String rootPath = mappath.get("rootPath").toString();
		String path = mappath.get("path").toString();
		DLPayload dl = os.objectStorage().objects().download(rootPath, path);

		InputStream ip = dl.getInputStream();
		byte[] in_b = null;
		ByteArrayOutputStream swapStream = new ByteArrayOutputStream();
		byte[] buff = new byte[100];
		int rc = 0;
		try {
			while ((rc = ip.read(buff, 0, 100)) > 0) {
				swapStream.write(buff, 0, rc);
			}
			in_b = swapStream.toByteArray();
			swapStream.close();
			ip.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return in_b;
	}

	private boolean haschild(String rootpath,String path) {
		List<? extends SwiftObject> objs = this.list(rootpath, path);
		for(SwiftObject swiftObject:objs){
			boolean flag=this.isDirectory(swiftObject.getName());
 			if(flag){
				return true;
			}
		}
		return false;
	}

	/**
	 * 描述：创建文件夹
	 * 
	 * @param rpath
	 *            文件夹的主目录
	 * @param path
	 *            创建文件件路径
	 * @return boolean
	 * 
	 */
	@Override
	public boolean createDir(String rootPath, String path) {
		os.objectStorage().containers().createPath(rootPath, path);
		return true;
	}

	/**
	 * 描述：重命名文件夹
	 * 
	 * @param rpath
	 *            文件目录的路劲
	 * @param name
	 *            重命名文件的名称
	 * @return boolean
	 */
	@Override
	public boolean renameDir(String rpath, String filename) {
		Map mappath = getSplitPath(rpath);
		String path = mappath.get("path").toString();
		String rootpath = mappath.get("rootPath").toString();
		// logger(mappath.get("rootPath").toString()+"执行renameDir方法，重命名目录文件");

		if (!path.contains("/")) {
			path = "/" + mappath.get("path").toString();
		}

		String temppath = UtilTools.replaceStr(path);
		String endstr = temppath.substring(0, temppath.length() - 1);
		int index = endstr.lastIndexOf("/");
		String newpath = null;
		if (index != -1) {
			newpath = temppath.substring(0, index + 1) + filename + "/";
		} else {
			newpath = filename + "/";
		}
		boolean flag = isexist(rootpath, newpath);
		if (flag) {
			rename( rootpath, path, path, newpath);
			renamedirfile(rootpath, path, newpath);
			return flag;
		}
		return flag;

	}

	private void renamecdirfile(String rootpath, String cpath, String path,
			String newpath) {
		
		String str1[]=newpath.split("/");
		String str2[]=cpath.split("/");
		String strpath="";
		for(int i=0;i<str2.length;i++){
			if(i<str1.length){
				strpath +=str1[i]+"/";
			}else{
				strpath += str2[i]+"/";
			}
		}
		this.copy(rootpath, rootpath, cpath, strpath);
		this.delete(rootpath, cpath);
	}

	private void rename( String rootPath, String epath, String path,
			String newPath) {
		List<? extends SwiftObject> objs = this.list(rootPath, path);
		for (SwiftObject swiftObject : objs) {
			if (swiftObject.isDirectory()) {
				String cpath = swiftObject.getName();
				rename(rootPath, cpath, path, newPath);
				renamecdirfile(rootPath, cpath, path, newPath);
			} else {
				String temppath = swiftObject.getName();
				renamecfilefile( rootPath, temppath, path, newPath);
			}
		}
	}

	private void renamecfilefile( String rootPath, String cpath,
			String path, String newPath) {
		
		String str1[]=newPath.split("/");
		String str2[]=cpath.split("/");
		String strpath="";
		for(int i=0;i<str2.length;i++){
			if(i<str1.length){
				strpath +=str1[i]+"/";
			}else if(i==str2.length-1){
				strpath += str2[i];
			}else{
				strpath += str2[i]+"/";
			}
		}
		this.copy(rootPath, rootPath, cpath, strpath);
		this.delete(rootPath, cpath);
	}

	private void renamedirfile(String rootPath, String path, String newPath) {
		this.copy(rootPath, rootPath, path, newPath);
		this.delete(rootPath, path);
	}

	private boolean isexist(String rootpath, String newpath){
		List<? extends SwiftObject> objs = this.list(rootpath);
		for(SwiftObject swiftObject: objs){
			if(swiftObject.getName().equals(newpath)){
				return false;
			}
		}
		return true;
	}
	
	/**
	 * 描述：拷贝目录
	 * 
	 * @param rpath
	 *            要拷贝文件夹的目录
	 * @param rnewpath
	 *            拷贝到某文件夹中的目录
	 * @return boolean
	 */
	@Override
	public boolean copyDir(String rpath, String rnewpath) {
		Map mappath = getSplitPath(rpath);
		String rmpath = mappath.get("path").toString();
		String rootpath = mappath.get("rootPath").toString();
		// logger(mappath.get("rootPath").toString()+"执行moveDir方法，移动目录文件");

		Map rmappath = getSplitPath(rnewpath);
		String rnpath = rmappath.get("path").toString();

		int len = rootpath.length();
		String path = rmpath;
		String newpath = rnpath;
		String name = rmpath.split("/")[rmpath.split("/").length - 1];
		if (path.equals(newpath)) {
			return false;
		}
		this.copy(rootpath, rootpath, path, newpath + name + "/");
		copydirfile(rootpath, path, newpath, name, path);
		return true;
	}
	
	/**
	 * 复制公用方法
	 * @param os
	 * @param srcContainer
	 * @param destContainer
	 * @param srcPath
	 * @param destPath
	 */
	private void copy(String srcContainer, String destContainer, String srcPath, String destPath){
		
		ObjectLocation srcLocation = ObjectLocation.create(srcContainer, srcPath);
		ObjectLocation destLocation = ObjectLocation.create(destContainer, destPath);
		os.objectStorage().objects().copy(srcLocation, destLocation);
	}


	private void copydirfile(String rootpath, String path,
			String newpath, String name, String epath) {
		List<? extends SwiftObject> objs = this.list(rootpath, path);
		for (SwiftObject swiftObject : objs) {
			if (swiftObject.isDirectory()) {
				String cpath = swiftObject.getName();
				String tpath = cpath.substring(path.length());
				String tnewpath = newpath + name + "/" + tpath;// strs[1];
				this.copy(rootpath, rootpath, cpath, tnewpath);
				copydirfile(rootpath, path, newpath, name, cpath);
			} else {
				String temppath = swiftObject.getName();
				if (temppath.endsWith("/")) {
					continue;
				}
				String tpath = temppath.substring(path.length());
				String tnewpath = newpath + name + "/" + tpath;// strs[1];
				this.copy(rootpath, rootpath, temppath, tnewpath);
			}
		}
	}

	/**
	 * 描述：移动目录
	 * 
	 * @param rpath
	 *            要移动文件夹的目录
	 * @param rnewpath
	 *            移动到某文件夹中的目录
	 * @return boolean
	 */
	@Override
	public boolean moveDir(String rpath, String rnewpath) {
		Map mappath = getSplitPath(rpath);
		String rmpath = mappath.get("path").toString();
		String rootpath = mappath.get("rootPath").toString();
		// logger(mappath.get("rootPath").toString()+"执行moveDir方法，移动目录文件");

		Map rmappath = getSplitPath(rnewpath);
		String rnpath = rmappath.get("path").toString();

		int len = rootpath.length();
		String path = rmpath;
		String newpath = rnpath;
		String name = rmpath.split("/")[rmpath.split("/").length - 1];
		if (path.equals(newpath)) {
			return false;
		}
		movedir(rootpath, path, newpath + name + "/");
		movedirfile(rootpath, path, newpath, name, path);
		return true;
	}

	private void movedir(String rootPath, String path, String newPath) {
		this.copy(rootPath, rootPath, path, newPath);
		this.delete(rootPath, path);
	}

	private void movedirfile(String rootPath, String path, String newPath,
			String name, String epath) {
		List<? extends SwiftObject> objs = this.list(rootPath, path);
		for (SwiftObject swiftObject : objs) {
			if (swiftObject.isDirectory()) {
				String cpath = swiftObject.getName();
				String tpath = cpath.substring(path.length());
				String tnewpath = newPath + name + "/" + tpath;// strs[1];
				movedir(rootPath, cpath, tnewpath);
				movedirfile(rootPath, path, newPath, name, cpath);
			} else {
				String temppath = swiftObject.getName();
				if (temppath.endsWith("/")) {
					continue;
				}
				String tpath = temppath.substring(path.length());
				String tnewpath = newPath + name + "/" + tpath;// strs[1];
				movefile(rootPath, temppath, tnewpath);
			}
		}
	}

	/**
	 * list公用方法
	 * @param rootPath
	 * @param path
	 * @return
	 */
	private List<? extends SwiftObject> list(String rootPath){
		return os.objectStorage().objects().list(rootPath);
	}
	
	private List<? extends SwiftObject> list(String rootPath, String path){
		return os.objectStorage().objects().list(rootPath,ObjectListOptions.create().path(path));
	}
	
	
	/**
	 * 描述：搜索文件
	 * 
	 * @param rootPath
	 *            根路径
	 * @param key
	 *            搜索条件
	 * @return List
	 */
	public List searchFile(String rootPath, String key) {
		
		List<? extends SwiftObject> objs = this.list(rootPath);
		List list = new ArrayList();
		for (SwiftObject c : objs) {
			String path = c.getName();
			String name = this.getName(c.getName());
			boolean flag = c.isDirectory();
			if (name != null
					&& name.toLowerCase().matches(
							".{0,}" + key.toLowerCase() + ".{0,}") && !flag) {
				FileBean fb = new FileBean();
				fb.setName(name);
				boolean isdir = path.endsWith("/");
				fb.setIsdirectory(isdir);
				if (isdir) {
					fb.setPath(c.getName());
				} else {
					String temppath = "temp" + File.separator
							+ this.getName(c.getName());
					fb.setFilepath(temppath);
					fb.setPath(path);
					fb.setLength(c.getSizeInBytes());
					fb.setLastmodified(DateUtil.cstToHMS(c.getLastModified()));
				}
				list.add(fb);
			}
		}
		return list;
	}

	/**
	 * 描述：根据type类型，进行文件分类查询
	 * 
	 * @param rootPath
	 *            :根路径
	 * @param type
	 *            :1 图片 2 文档 3 视频 4 音乐 5 其他
	 * @return List
	 */
	public List getCategoryStoredList(String rootPath, int type) {
		
		List<? extends SwiftObject> swiftObjects = this.list(rootPath);
		logger(rootPath + "执行getCategoryStoredList方法，文件分类查询");
		List<SwiftObject> objects = new ArrayList<>();
		for (SwiftObject so : swiftObjects) {
			String fileName = so.getName();
			switch (type) {
			case 1:
				if (UtilTools.isImage(fileName)) {
					objects.add(so);
				}
				break;
			case 2:
				if (UtilTools.isDoc(fileName)) {
					objects.add(so);
				}
				break;
			case 3:
				if (UtilTools.isMediea(fileName)) {
					objects.add(so);
				}
				break;
			case 4:
				if (UtilTools.isMp3(fileName)) {
					objects.add(so);
				}
				break;
			case 5:
				if (!UtilTools.isImage(fileName) && !UtilTools.isDoc(fileName)
						&& !UtilTools.isMediea(fileName)
						&& !UtilTools.isMp3(fileName) && !so.isDirectory()) {
					objects.add(so);
				}
				break;
			default:
				break;
			}
		}

		List<FileBean> list = new ArrayList<>();
		for (SwiftObject so : objects) {
			FileBean fb = new FileBean();
			fb.setName(this.getName(so.getName()));
			boolean flag = so.isDirectory();
			fb.setIsdirectory(flag);
			if (!flag) {
				fb.setLength(so.getSizeInBytes());
			}
			fb.setPath(so.getName());
			fb.setLastmodified(DateUtil.cstToHMS(so.getLastModified()));
			list.add(fb);
		}
		return list;
	}

	private void movefile(String rootPath, String path, String newPath) {
		this.copy(rootPath, rootPath, path, newPath);
		this.delete(rootPath, path);
	}

	/**
	 * 设置文件的元数据
	 * @param os
	 * @param rootPath
	 * @param path
	 */
	public boolean setMetadata(String rootPath, String path){
		Map<String, String> myMetadataMap = new HashMap<>();
		try {
			path = URLEncoder.encode(path,"UTF-8");
			path = path.replaceAll("\\+",  "%20"); 
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		myMetadataMap.put("Oldpath", path); // 放入metadata中的key值强制首字母大写，其余小写
		os.objectStorage().objects().updateMetadata(ObjectLocation.create(rootPath, path),  myMetadataMap);
		return true;
	}
	
	/**
	 * 删除文件、文件夹
	 * @param rootPath
	 * @param srcPath
	 * @param name
	 * @param isDir
	 */
	public void deleteFile(String rootPath, String srcPath, String name, boolean isDir){
		if(isDir){
			// 删除文件夹
			this.deletefiles(rootPath, srcPath, name+"/");
			// 删除文件夹中的文件
			this.deletedirfile(rootPath, srcPath, name+"/");
		}else{
			this.deletefiles(rootPath, srcPath, name);
		}
	}
	
	/**
	 * 删除文件/文件夹到回收站
	 * @param rootPath
	 * @param srcPath
	 * @param destPath
	 */
	public void deletefiles(String rootPath, String srcPath, String destPath) {
		
		// 设置元数据
		boolean flag = this.setMetadata(rootPath, srcPath);
		if(!flag){
			System.out.println("********重要：设置Metadata失败 name-->" + srcPath);
		}
		// 复制到回收站
		this.copy(rootPath, Constants.GARBAGE_PREFIX + rootPath, srcPath, destPath);
		// 删除
		this.delete(rootPath, srcPath);
	}

	/**
	 * 删除公用方法
	 * @param os
	 * @param rootPath
	 * @param srcPath
	 */
	private void delete(String rootPath, String srcPath){
		os.objectStorage().objects().delete(rootPath, srcPath);
	}
	
	/**
	 * 删除文件夹中的文件/文件夹 递归
	 * @param rootPath
	 * @param path
	 * @param destPath
	 */
	private void deletedirfile(String rootPath, String path, String destPath) {
		List<? extends SwiftObject> list = this.list(rootPath, path);
		for(SwiftObject so : list){
			String filePath = so.getName();
			String fileName = this.getName(filePath);
			if (this.isDirectory(filePath)) { // 文件夹
				// 删除文件夹到回收站
				this.deletefiles(rootPath,filePath,destPath + fileName+"/");
				// 删除文件夹下的文件
				deletedirfile(rootPath, filePath, destPath + fileName+"/");
			}else{ // 文件
				// 删除文件到回收站
				this.deletefiles(rootPath,filePath, destPath + fileName);
			}
		}
	}

	/**
	 * 描述：清空垃圾箱
	 * 
	 * @param rootpath
	 *            根路径
	 */
	public void deleteAllGarbageFile(String rootpath) {
		String garbagePath = Constants.GARBAGE_PREFIX + rootpath;
		List<? extends SwiftObject> list = this.list(garbagePath);
		for(SwiftObject so : list){
			this.delete(garbagePath, so.getName());
		}
	}

	/**
	 * 描述：还原垃圾箱文件
	 * 
	 * @param rootPath
	 *            根路径
	 * @param path
	 *            文件路径
	 * @param isDir
	 *            true 目录 false 非目录
	 * @return void
	 */
	public void backgarbagefile(String rootPath, String path, boolean isDir) {
		// logger(rootpath+"执行backgarbagefile方法，还原垃圾箱文件");
		if (isDir) {
			backFile(rootPath, path);
			backDirFile(rootPath, path);
		} else {
			backFile(rootPath, path);
		}
	}
	
	/**
	 * 递归还原文件夹内容
	 * @param rootpath
	 * @param path
	 */
	private void backDirFile(String rootPath, String path) {
		List<? extends SwiftObject> list = this.list(Constants.GARBAGE_PREFIX + rootPath, path);
		for(SwiftObject so : list){
			String filePath = so.getName();
			this.backFile(rootPath,filePath);
			if (this.isDirectory(filePath)) { // 文件夹
				this.backDirFile(rootPath, filePath);
			}
		}
	}

	/**
	 * 还原文件、文件夹
	 * @param rootPath
	 * @param srcPath
	 */
	private void backFile(String rootPath, String srcPath){
		String garbagePath = Constants.GARBAGE_PREFIX + rootPath;
		Map<String, String> meta = os.objectStorage().objects().getMetadata(garbagePath, srcPath);
		String key = "Oldpath";
		String path = meta.get(key);
		//== null ? meta.get(SwiftHeaders.OBJECT_METADATA_PREFIX + key) : meta.get(key);
		if(path != null){
			try {
				path = path.replaceAll("%20", "\\+"); 
				path = URLDecoder.decode(path,"UTF-8");
				// 创建上级目录
				StringBuffer prefix = new StringBuffer();
				String[] dirs = path.split("/");
				for(int i=0; i<dirs.length-1; i++){
					boolean flag = false; // 目录不存在
					String thisDir = dirs[i]+"/";
					if(i==0){
						flag = this.isExeist(rootPath, "", thisDir);
					}else{
						prefix.append(dirs[i-1]);
						prefix.append("/");
						flag = this.isExeist(rootPath, prefix.toString(), prefix + thisDir);
					}
					if(!flag){
						this.createDir(rootPath, prefix + thisDir);
					}
				}
				
				this.copy(garbagePath, rootPath, srcPath, path);
				this.delete(garbagePath, srcPath);
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * 判断文件、文件夹是否存在
	 * @return
	 */
	private boolean isExeist(String rootPath, String path, String fileName){
		List<? extends SwiftObject> list = os.objectStorage().objects().list(rootPath, ObjectListOptions.create().path(path));
		for(SwiftObject so : list){
			if(so.getName().equals(fileName)){
				return true; // 存在
			}
		}
		return false;
	}
	
	/**
	 * 描述：获取目录文件
	 * @param rpath 文件的目录
	 * @return List
	 */
	@Override
	public List getDir( String rpath) {
		Map mappath =getSplitPath(rpath);
		String path = mappath.get("path").toString();
		String rootpath=mappath.get("rootPath").toString();
		
		List<? extends SwiftObject> objs;
		objs = this.list(rootpath, path);
		List list = new ArrayList();
		for (SwiftObject swiftObject : objs) {
			FileBean fb = new FileBean();
			String filePath = swiftObject.getName();
			boolean flag = this.isDirectory(filePath);
			fb.setName(this.getName(filePath));
			fb.setIsdirectory(flag);
			boolean haschild=this.haschild(rootpath, filePath);
			fb.setHaschild(haschild);
			if (flag) {
				fb.setPath(filePath);
				list.add(fb);
			}
		}
		return list;
	}
}
