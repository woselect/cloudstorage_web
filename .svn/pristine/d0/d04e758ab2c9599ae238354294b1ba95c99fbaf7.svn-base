/*
 * Copyright (c) 2014, 2016, XIANDIAN and/or its affiliates. All rights reserved.
 * XIANDIAN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 */
package com.xiandian.cloud.storage.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.xiandian.cloud.storage.bean.FileBean;
import com.xiandian.cloud.storage.cons.Constants;
import com.xiandian.cloud.storage.domain.User;
import com.xiandian.cloud.storage.service.sup.Storage;
import com.xiandian.cloud.storage.sh.SwiftDFS;
import com.xiandian.cloud.storage.util.ComparatorFile;

/**
 * swift对应的存储api
 * 
 * @author 云计算应用与开发项目组
 * @since  V1.4
 * 
 */
@Service
public class SwiftStorageService  extends Storage {
	
	
	/**
	 * 创建用户对应的容器，垃圾站
	 * 
	 * @param email
	 */
	public void createContainer(String username) {
		SwiftDFS swiftdfs= new SwiftDFS();
		swiftdfs.createContainer(username);
		swiftdfs.createContainer(Constants.GARBAGE_PREFIX + username);
	}

	/**
	 * 取得路径下的所有文件
	 */
	public List getAllStoredList(String username, String path) {
		SwiftDFS swiftdfs = new SwiftDFS();
		String up =null;
		up = username+"/"+path;
		List list =swiftdfs.getFile(up);
		ComparatorFile comparator = new ComparatorFile();  
        if (!list.isEmpty()) {  
            synchronized (list) {  
                Collections.sort(list, comparator);  
            }  
  
        }  
		return list;
	}

	/**
	 * 取得路径下的所有文件夹
	 */
	public List getAllStoredDirectoryList(String username, String path,String upath) {
		SwiftDFS swiftdfs = new SwiftDFS();
		List list = new ArrayList();
		String up =null;
		if(path==null||path.equals("")){
			 up = username;
		}else{
			up = username+"/"+path;
		}
		list = swiftdfs.getDir(up);
		return list;
	}
	
	
	/**
	 * 搜索根路径下的所有与key匹配的文件及文件夹
	 * @param username
	 * @param upath
	 * @param key
	 * @return
	 */
	public List searchStoredList(String username,String upath,String key) {	
		List list = new ArrayList();
		SwiftDFS swiftdfs = new SwiftDFS();
		list = swiftdfs.searchFile(username, key);
		
		ComparatorFile comparator = new ComparatorFile();  
        if (!list.isEmpty()) {  
            synchronized (list) {  
                Collections.sort(list, comparator);  
            }  
        }  
		return list;
	}
	
	/**
	 * 取得垃圾箱路径下的所有文件
	 */
	public List getAllGarbageList(String username) {
		SwiftDFS swiftdfs = new SwiftDFS();
		List<FileBean> list = swiftdfs.getFile(Constants.GARBAGE_PREFIX+username);
		return list;
	}
	
	/**
	 * 取得路径下对应类型的所有文件
	 * 
	 * @param email
	 * @return
	 */
	public List getCategoryStoredList(String username, int type,String upath) {
		SwiftDFS swiftdfs = new SwiftDFS();
		List categoryStoredList = swiftdfs.getCategoryStoredList(username, type);
		return categoryStoredList;
	}

	/**
	 * 创建文件夹
	 * 
	 * @param name
	 * @return
	 */
	public boolean createDir(String username, String path, String name) {
		SwiftDFS swiftdfs = new SwiftDFS();
		path += name+"/";
		swiftdfs.createDir(username, path);
		return true;
	}

	/**
	 * 创建文件
	 * 
	 * @param name
	 * @return
	 */
	public boolean createFile(String username, String path, String name,
			String filepath) {
		SwiftDFS swiftdfs = new SwiftDFS();
		swiftdfs.createFile(username,path, name, filepath);
		return true;		
	}

	/**
	 * 删除文件
	 * 移动到回收站，由于没有实现还原，所以简化实现删除
	 * 
	 */
	public void deletefiles(User user, List<Map<String, Object>> list) {
		for (Map<String, Object> map : list) {
			String name = (String) map.get("name");
			String path = (String) map.get("path");
			String tisDir = (String) map.get("isDir");
			boolean isDir = "true".equals(tisDir) ? true:false;
			SwiftDFS swiftdfs = new SwiftDFS();
			swiftdfs.deleteFile(user.getUsername(), path, name, isDir);
		}
	}



	/**
	 * 重命名文件
	 * 
	 * @param email
	 * @param path
	 */
	public boolean updatefile(String username, String path, String name,boolean isdir) {
			SwiftDFS swiftdfs = new SwiftDFS();
			if(isdir){
				return swiftdfs.renameDir(username+"/"+path, name);
			}else{
				return swiftdfs.renameFile(username+"/"+path, name);
			}
		}

	/**
	 * 复制文件
	 * 
	 * @param email
	 * @param path
	 */
	public boolean copyfile(String username,List<Map<String,Object>> list) {
		
		for (Map<String, Object> map : list) {
			String path = (String) map.get("path");
			String newpath = (String) map.get("newpath");
			String name = (String) map.get("name");
			String tisDir = (String) map.get("isDir");
			boolean isDir = "true".equals(tisDir) ? true:false;
			SwiftDFS swiftdfs = new SwiftDFS();
			if (isDir){
				swiftdfs.copyDir(username+"/"+path, username+"/"+newpath);
			}else{
				swiftdfs.copyFile(username+"/"+path, username+"/"+newpath+name);
			}
		}
		return true;
	}
	
	/**
	 * 移动文件
	 * 
	 * @param email
	 * @param path
	 */
	public boolean movefile(String username,List<Map<String,Object>> list) {
		for (Map<String, Object> map : list) {
			String path = (String) map.get("path");
			String newpath = (String) map.get("newpath");
			String name = (String) map.get("name");
			String tisDir = (String) map.get("isDir");
			boolean isDir = "true".equals(tisDir) ? true:false;
			if (isDir){
				SwiftDFS swiftdfs = new SwiftDFS();
				swiftdfs.moveDir(username+"/"+path, username+"/"+newpath);
			}else{
				SwiftDFS swiftdfs = new SwiftDFS();
				swiftdfs.moveFile(username+"/"+path, username+"/"+newpath+name);
			}
		}
		return true;
	}
	

	/**
	 * 还原垃圾箱的文件
	 * 
	 * @param email
	 * @param path
	 */
	public void backgarbagefile(String username, List<Map<String, Object>> list) {
		for (Map<String, Object> map : list) {
			String path = (String) map.get("path");
			String tisDir = (String) map.get("isDir");
			boolean isDir = "true".equals(tisDir) ? true:false;
			SwiftDFS swiftdfs = new SwiftDFS();
			swiftdfs.backgarbagefile(username, path, isDir);
		}
	}

	/**
	 * 清空垃圾箱
	 * 
	 * @param email
	 * @param path
	 */
	public void deleteallgarbagefile(String username) {
		SwiftDFS swiftdfs = new SwiftDFS();
		swiftdfs.deleteAllGarbageFile(username);
	}

	/**
	 * 下载文件
	 * 
	 * @param email
	 * @param path
	 */
	public byte[] download(String username,String path) {
		SwiftDFS swiftdfs = new SwiftDFS();
		return swiftdfs.downloadFile(username+"/"+path);
	}
}
